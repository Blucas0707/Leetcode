Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]

/*
1. Use bottom up 方式建出base case 0, 1 layers
2. 將每一層都從上一層pascal 建出來, 並存到[][]int裡面
3. 要注意每一層的numRows, numRows-1等條件
*/


func generate(numRows int) [][]int {
    return pascal(numRows)
}

func pascal(numRows int) [][]int {
    var ans [][]int
    for i:=0;i<numRows;i++{
        temp := layer(i,ans)
        ans = append(ans,temp)
    }
    return ans
}
func layer(n int, nowpascal [][]int) []int {
    if n == 0 {
        return []int{1}
    }else if n == 1{
        return []int{1,1}
    }
    temp := []int{}
    lastpascal := nowpascal[n-1]
    j := 0
    for i:=0;i<n+1;i++{
        if i == 0 || i == n {
            temp = append(temp,1)
        }else{
            sum := lastpascal[j] + lastpascal[j+1]
            temp = append(temp,sum)
            // fmt.Println(j,sum)
            j += 1
        }
    }
    return temp
}
