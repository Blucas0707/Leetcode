Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

More formally check if there exists two indices i and j such that :

i != j
0 <= i, j < arr.length
arr[i] == 2 * arr[j]
 

Example 1:

Input: arr = [10,2,5,3]
Output: true
Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.
Example 2:

Input: arr = [7,1,14,11]
Output: true
Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.
Example 3:

Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.
 

Constraints:

2 <= arr.length <= 500
-10^3 <= arr[i] <= 10^3


```
Idea:
1. Judge even and odd performance,
  If num is even, we need to consider 2 situations: a. num/2, b. num*2
  If num is odd, we only need to consider 1 condition:num*2
```

class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        match = dict()
        for num in arr:
            if num in match:
                return True
            if num % 2 == 0:
                match[num/2] = 1
                match[num*2] = 1
            else:
                match[num*2] = 1
        return False

# Option 2
class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        s = set()
        for num in arr:
            if num % 2 == 0 and num // 2 in s:
                return True
            if num * 2 in s:
                return True
            s.add(num)
        return False
