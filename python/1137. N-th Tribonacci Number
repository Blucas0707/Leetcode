The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

 

Example 1:

Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
Example 2:

Input: n = 25
Output: 1389537
 

Constraints:

0 <= n <= 37
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.

# Idea:
# 1. Recusion => Timeout
# 2. DP => memorize and recursion


class Solution:
    def tribonacci(self, n: int) -> int:
        return self.memo_tribonacci(n)
    
    # recursion => Timeout
    def recursion_tribonacci(self, n):
        if n == 0:
            return 0
        elif n < 3:
            return 1
        return self.recursion_tribonacci(n-1) + self.recursion_tribonacci(n-2) + self.recursion_tribonacci(n-3)
    # memo
    def memo_tribonacci(self, n, tri={}):
        if tri.get(n) != None:
            return tri.get(n)
        if n == 0:
            tri[n] = 0
            return 0
        elif n < 3:
            tri[n] = 1
            return 1
        
        tri[n] = self.memo_tribonacci(n-1,tri) + self.memo_tribonacci(n-2,tri) + self.memo_tribonacci(n-3,tri)
        return tri[n]
        
