Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Example 1:

Input: arr = [2,1]
Output: false
Example 2:

Input: arr = [3,5,5]
Output: false
Example 3:

Input: arr = [0,3,2,1]
Output: true
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104

```
Idea: 上山要嚴格遞增，下山要嚴格遞減
1. 先跑完上山，判斷peak 位置，在跑下山，全部都跑完，代表True，否則False
2. 2 pointer: 一個從前面掃peak, 一個從後面掃peak, 要小心所有失敗可能

```

class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        N = len(arr)
        i = 0
        
        while i+1 < N and arr[i+1] > arr[i]:
            i += 1
        
        # peak can't be at start or end.
        if i == 0 or i == N-1:
            return False
        
        while i+1 < N and arr[i+1] < arr[i]:
            i += 1
        
        return i == N - 1
        
# 2 pointer, time:O(N), space:O(1)

class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        start = 0
        end = len(arr) - 1
        while start+1 < len(arr) - 1:
            if arr[start+1] > arr[start]:
                start += 1
            else:
                break
        while end-1 > -1:
            if arr[end-1] > arr[end]:
                end -=1
            else:
                break
        
        return start == end and start not in [0,len(arr)-1] and end not in [0,len(arr)-1]
