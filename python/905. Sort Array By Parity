https://leetcode.com/problems/sort-array-by-parity/

Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 5000

```
Idea: 
1. 2 pointer: 現在的index, 最後的odd index, 去判斷
```

class Solution:
    def sortArrayByParity(self, nums: List[int]) -> List[int]:
        # edge case
        if len(nums) == 1:
            return nums
        
        curIndex, oddIndex = 0,0
        while curIndex < len(nums):
            if nums[curIndex] % 2 == 0 and nums[oddIndex] % 2 != 0:
                nums[curIndex], nums[oddIndex] = nums[oddIndex], nums[curIndex]
                oddIndex += 1
            
            if nums[oddIndex] % 2 == 0:
                oddIndex += 1
            
            curIndex += 1
        
        return nums
        
