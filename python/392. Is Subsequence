Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.

# cur to save s index
# 有符合的t, cur + 1
# 最後判斷 cur 是否跟s長度一致
# 要特別注意 edge condition, s or t =""

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        if len(t) < len(s):
            return False
        
        if len(s) == 0:
            return True
        
        cur = 0
        for c in t:
            if c == s[cur]:
                cur += 1
            if cur == len(s):
                break
        return cur == len(s)
        
